{"version":3,"sources":["logo.svg","TodoBanner.js","TodoRow.js","TodoCreater.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoBanner","render","className","props","name","tasks","filter","t","done","length","Component","TodoRow","item","action","type","checked","onChange","callback","TodoCreater","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","state","onClick","VisibilityControl","classNam","isChecked","e","description","App","task","todoItems","find","localStorage","setItem","JSON","stringify","toggleTodo","todo","map","todoTableRows","doneValue","key","ComponentDidMount","data","getItem","parse","userName","showCompleted","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f81db419.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nexport class TodoBanner extends Component\n{\n\t\trender = () =>\n\n\t\t<h4 className=\"bg-primary text-white text-center p-2\">\n\t\t\t{ this.props.name }'s Todo List\n\t\t\t({ this.props.tasks.filter(t=> !t.done).length } item to do )\n\t\t</h4>\n}","import React, { Component } from 'react';\n\nexport class TodoRow extends Component\n{\n\trender = () =>\n\t<tr>\n\t\t<td>{ this.props.item.action} </td>\n\t\t<td>\n\t\t\t<input type=\"checkbox\" checked={this.props.item.done}\n\t\t\tonChange= { ()=>  this.props.callback(this.props.item )} />\n\t\t</td>\n\t</tr>\t\n}\n","import React, { Component } from 'react';\n\nexport class TodoCreater extends Component\n{\n\tconstructor(props)\n\t{\n\t\tsuper(props);\n\t\tthis.state = { newItemText : \" \"}\n\t}\n\n\tupdateNewTextValue = (event) =>\n\t{\n\t\tthis.setState({ newItemText : event.target.value});\n\t}\n\n\tcreateNewTodo = () =>\n\t{\n\t\tthis.props.callback (this.state.newItemText )\n\t\tthis.setState({ newItemText:\"\" })\n\t}\n\n\trender = () =>\n\t<div className=\"my-1\">\n\t\t<input className=\"form-control\" value={this.state.newItemText}\n\t\tonChange={this.updateNewTextValue} />\n\n\t\t<button className=\"btn btn-primary mt-1\"\n\t\t\tonClick={this.createNewTodo}>\n\t\t\t\tAdd Todo Task\n\t\t</button>\n\t</div>\t\t\t\n}\n\n","import React, { Component } from 'react';\n\nexport class VisibilityControl extends Component\n{\nrender = () =>\n\t<div className=\"form-check\">\n\t\t\t<input classNam=\"form-check-input\" type=\"checkbox\"\n\t\t\tchecked={this.props.isChecked}\n\t\t\tonChange={ (e) => this.props.callback(e.target.checked)} />\n\n\t\t\t<label className=\"form-check-label\">\n\t\t\t\t\t\tShow {this.props.description}\n\t\t\t</label>\t\n\t\t\t\n\n\t</div>\n\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TodoBanner} from \"./TodoBanner\";\nimport {TodoRow} from \"./TodoRow\";\nimport {TodoCreater} from \"./TodoCreater\";\nimport { VisibilityControl } from \"./VisibilityControl\";\n\nexport default class App extends Component\n{\n  constructor (props) \n  {\n    super(props);\n    this.state = \n    {\n      userName: \"Inday\",\n      todoItems : [{ action: \"Buy a flower\", done: false},\n                    { action: \"Do Workout\", done: true},\n                    { action: \"Study Programming\", done: false},\n                    { action: \"Call a friend\", done: true}],\n                showCompleted : true    \n       // newItemText : \" \"             \n    }  \n  }\n\n  updateNewTextValue = (event) => \n  {\n      this.setState({ newItemText: event.target.value });\n  }\n\n  createNewTodo = (task) => \n  {\n      if (!this.state.todoItems\n                      .find(item => item.action === task))\n                      {\n                         this.setState({\n                          todoItems : [ ...this.state.todoItems, \n                                        {action : task,\n                                        done: false}]},\n      () => localStorage.setItem(\"todos\", \n                                JSON.stringify(this.state)));                                \n                                        //newItemText: \"\n                      }\n  }\n\n\n   \n   \n      toggleTodo =(todo) => this.setState\n      ({ todoItems : this.state.todoItems.map \n          (item => item.action  === todo.action ? \n             { ...item, done: !item.done }  : item   )});\n\n      todoTableRows = (doneValue) => this.state.todoItems\n      .filter(item => item.done === doneValue)\n      .map\n         ( item =>  \n          <TodoRow key= {item.action} item={item}\n            callback= {this.toggleTodo} />)\n                \n       ComponentDidMount =() =>\n       {\n          let data = localStorage.getItem(\"todos\");\n          this.setState( data!=null ? JSON.parse(data)  :\n          {\n            userName: \"Nday\",\n      todoItems : [{ action: \"Buy a flower\", done: false},\n                    { action: \"Do Workout\", done: true},\n                    { action: \"Study Programming\", done: false},\n                    { action: \"Call a friend\", done: true}],\n                showCompleted : true    \n          }\n            );\n       }         \n        \n  render = () =>\n    <div>\n          <TodoBanner name = {this.state.userName}\n                      tasks={this.state.todoItems} />\n\n         <div className= \"container-fluid\">\n            <TodoCreater callback={this.createNewTodo} />\n\n            <table className=\"table table-striped table-bordered\">\n              <thead>\n                <tr>\n                  <th> Todo Task Name </th>\n                  <th> Done </th>\n                </tr>\n              </thead>\n\n              <tbody>\n                    { this.todoTableRows(false) }\n              </tbody>\n              </table>\n              <div className=\"bg-danger text-white text-center p-2\">\n\n                    <VisibilityControl description =\"Completed Tasks\"\n                    isChecked={this.state.showCompleted}\n                    callback={ (checked) =>\n                            this.setState({showCompleted: checked })} />\n              </div>\n                   { \n                this.state.showCompleted &&\n                <table className=\"table table-striped table-bordered\">\n                  <thead>\n                    <tr>\n                      <td>Task Name</td><td>Status</td>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.todoTableRows(true)}\n\n                    </tbody>\n\n                </table>\n              }\n  \n              </div>\n              </div>\n}\n         \n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}